"""add_returns_wallet_models

Revision ID: 755c98009d5e
Revises: 5b845c9ce567
Create Date: 2025-10-10 08:51:39.427051

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel
# revision identifiers, used by Alembic.
revision: str = '755c98009d5e'
down_revision: Union[str, Sequence[str], None] = '5b845c9ce567'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('wallet_transactions',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('transaction_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('balance_after', sa.Float(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_refund', sa.Boolean(), nullable=False),
    sa.Column('transfer_eligible_at', sa.DateTime(), nullable=True),
    sa.Column('transferred_to_bank', sa.Boolean(), nullable=False),
    sa.Column('transferred_at', sa.DateTime(), nullable=True),
    sa.Column('return_request_id', sa.Integer(), nullable=True),
    # sa.ForeignKeyConstraint(['return_request_id'], ['return_requests.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
   
    op.create_index(op.f('ix_wallet_transactions_transfer_eligible_at'), 'wallet_transactions', ['transfer_eligible_at'], unique=False)
    op.create_index(op.f('ix_wallet_transactions_user_id'), 'wallet_transactions', ['user_id'], unique=False)
    op.create_table('user_wallets',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('balance', sa.Float(), nullable=False),
    sa.Column('total_credited', sa.Float(), nullable=False),
    sa.Column('total_debited', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_wallets_user_id'), 'user_wallets', ['user_id'], unique=True)
    op.create_table('return_requests',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('return_type', sa.Enum('FULL_ORDER', 'SINGLE_PRODUCT', name='returntype'), nullable=False),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'COMPLETED', name='returnstatus'), nullable=False),
    sa.Column('refund_amount', sa.Float(), nullable=False),
    sa.Column('refund_status', sa.Enum('PENDING', 'PROCESSED', 'FAILED', name='refundstatus'), nullable=False),
    sa.Column('wallet_credit_id', sa.Integer(), nullable=True),
    sa.Column('transfer_eligible_at', sa.DateTime(), nullable=True),
    sa.Column('transferred_at', sa.DateTime(), nullable=True),
    sa.Column('admin_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('rejected_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['wallet_credit_id'], ['wallet_transactions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_return_requests_order_id'), 'return_requests', ['order_id'], unique=False)
    op.create_index(op.f('ix_return_requests_refund_status'), 'return_requests', ['refund_status'], unique=False)
    op.create_index(op.f('ix_return_requests_return_type'), 'return_requests', ['return_type'], unique=False)
    op.create_index(op.f('ix_return_requests_status'), 'return_requests', ['status'], unique=False)
    op.create_index(op.f('ix_return_requests_transfer_eligible_at'), 'return_requests', ['transfer_eligible_at'], unique=False)
    op.create_index(op.f('ix_return_requests_user_id'), 'return_requests', ['user_id'], unique=False)
    op.create_table('return_items',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('return_request_id', sa.Integer(), nullable=False),
    sa.Column('order_item_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('variation_option_id', sa.Integer(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Float(), nullable=False),
    sa.Column('refund_amount', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['order_item_id'], ['order_product.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['return_request_id'], ['return_requests.id'], ),
    sa.ForeignKeyConstraint(['variation_option_id'], ['variation_options.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_return_items_order_item_id'), 'return_items', ['order_item_id'], unique=False)
    op.create_index(op.f('ix_return_items_product_id'), 'return_items', ['product_id'], unique=False)
    op.create_index(op.f('ix_return_items_return_request_id'), 'return_items', ['return_request_id'], unique=False)
    op.create_foreign_key(None, 'wallet_transactions', 'return_requests', ['return_request_id'], ['id'])
    op.alter_column('faqs', 'question',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('faqs', 'answer',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_index('idx_faqs_active_ordered', table_name='faqs')
    op.drop_index('idx_faqs_question_answer_fts', table_name='faqs', postgresql_using='gin')
    op.drop_index('ix_faqs_created_at', table_name='faqs')
    op.drop_index('uq_faq_question', table_name='faqs')
    op.alter_column('reviews', 'photos',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('ix_reviews_created_at', table_name='reviews')
    op.drop_index('ix_reviews_rating', table_name='reviews')
    op.drop_index('uq_review_order_product', table_name='reviews', postgresql_where='(deleted_at IS NULL)')
    op.drop_index('idx_wishlist_user_created', table_name='wishlists')
    op.drop_index('ix_wishlists_created_at', table_name='wishlists')
    op.drop_index('ix_wishlists_product_id', table_name='wishlists')
    op.drop_index('uq_wishlist_user_product_variation', table_name='wishlists')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('uq_wishlist_user_product_variation', 'wishlists', ['user_id', 'product_id', 'variation_option_id'], unique=False)
    op.create_index('ix_wishlists_product_id', 'wishlists', ['product_id'], unique=False)
    op.create_index('ix_wishlists_created_at', 'wishlists', ['created_at'], unique=False)
    op.create_index('idx_wishlist_user_created', 'wishlists', ['user_id', 'created_at'], unique=False)
    op.create_index('uq_review_order_product', 'reviews', ['order_id', 'product_id'], unique=False, postgresql_where='(deleted_at IS NULL)')
    op.create_index('ix_reviews_rating', 'reviews', ['rating'], unique=False)
    op.create_index('ix_reviews_created_at', 'reviews', ['created_at'], unique=False)
    op.alter_column('reviews', 'photos',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_index('uq_faq_question', 'faqs', ['question'], unique=False)
    op.create_index('ix_faqs_created_at', 'faqs', ['created_at'], unique=False)
    op.create_index('idx_faqs_question_answer_fts', 'faqs', [sa.text("to_tsvector('english'::regconfig, (question::text || ' '::text) || answer::text)")], unique=False, postgresql_using='gin')
    op.create_index('idx_faqs_active_ordered', 'faqs', ['is_active', 'order', 'created_at'], unique=False)
    op.alter_column('faqs', 'answer',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('faqs', 'question',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index(op.f('ix_user_wallets_user_id'), table_name='user_wallets')
    op.drop_table('user_wallets')
    op.drop_index(op.f('ix_wallet_transactions_user_id'), table_name='wallet_transactions')
    op.drop_index(op.f('ix_wallet_transactions_transfer_eligible_at'), table_name='wallet_transactions')
    op.drop_table('wallet_transactions')
    op.drop_index(op.f('ix_return_items_return_request_id'), table_name='return_items')
    op.drop_index(op.f('ix_return_items_product_id'), table_name='return_items')
    op.drop_index(op.f('ix_return_items_order_item_id'), table_name='return_items')
    op.drop_table('return_items')
    op.drop_index(op.f('ix_return_requests_user_id'), table_name='return_requests')
    op.drop_index(op.f('ix_return_requests_transfer_eligible_at'), table_name='return_requests')
    op.drop_index(op.f('ix_return_requests_status'), table_name='return_requests')
    op.drop_index(op.f('ix_return_requests_return_type'), table_name='return_requests')
    op.drop_index(op.f('ix_return_requests_refund_status'), table_name='return_requests')
    op.drop_index(op.f('ix_return_requests_order_id'), table_name='return_requests')
    op.drop_table('return_requests')
    # ### end Alembic commands ###
