"""create orders tables fixed

Revision ID: c25730af433a
Revises: 97ece59f9ba1
Create Date: 2025-10-05 18:08:58.327183

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = 'c25730af433a'
down_revision: Union[str, Sequence[str], None] = '97ece59f9ba1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First handle the text to string conversions
    op.alter_column('email_template', 'html_content',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('products', 'warranty',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('products', 'meta_description',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('products', 'return_policy',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('products', 'shipping_info',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('products', 'dimension_unit',
               existing_type=sa.VARCHAR(length=10),
               type_=sqlmodel.sql.sqltypes.AutoString(length=30),
               existing_nullable=True)
    
    # Fix shipping_classes is_global column with explicit casting
    op.execute('ALTER TABLE shipping_classes ALTER COLUMN is_global TYPE BOOLEAN USING is_global::boolean')
    
    # ### end Alembic commands ###

    # Create orders table first (it doesn't depend on other new tables)
    op.create_table('orders',
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('tracking_number', sa.String(length=191), nullable=False),
        sa.Column('customer_id', sa.BigInteger(), nullable=True),
        sa.Column('customer_contact', sa.String(length=191), nullable=False),
        sa.Column('customer_name', sa.String(length=191), nullable=True),
        sa.Column('amount', sa.Float(), nullable=False),
        sa.Column('sales_tax', sa.Float(), nullable=True),
        sa.Column('paid_total', sa.Float(), nullable=True),
        sa.Column('total', sa.Float(), nullable=True),
        sa.Column('cancelled_amount', sa.Numeric(precision=10, scale=2), nullable=False, server_default='0.00'),
        sa.Column('admin_commission_amount', sa.Numeric(precision=10, scale=2), nullable=False, server_default='0.00'),
        sa.Column('language', sa.String(length=191), nullable=False, server_default='en'),
        sa.Column('coupon_id', sa.BigInteger(), nullable=True),
        sa.Column('shop_id', sa.BigInteger(), nullable=True),
        sa.Column('discount', sa.Float(), nullable=True),
        sa.Column('payment_gateway', sa.String(length=191), nullable=True),
        sa.Column('shipping_address', sa.JSON(), nullable=True),
        sa.Column('billing_address', sa.JSON(), nullable=True),
        sa.Column('logistics_provider', sa.BigInteger(), nullable=True),
        sa.Column('delivery_fee', sa.Float(), nullable=True),
        sa.Column('delivery_time', sa.String(length=191), nullable=True),
        sa.Column('order_status', sa.String(length=50), nullable=False, server_default='order-pending'),
        sa.Column('payment_status', sa.String(length=50), nullable=False, server_default='payment-pending'),
        sa.Column('fullfillment_id', sa.BigInteger(), nullable=True),
        sa.Column('assign_date', sa.DateTime(), nullable=True),
        sa.Column('deleted_at', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('tracking_number'),
        sa.ForeignKeyConstraint(['customer_id'], ['users.id'], name='orders_customer_id_fkey'),
        sa.ForeignKeyConstraint(['shop_id'], ['shops.id'], name='orders_shop_id_fkey', ondelete='CASCADE'),
        sa.CheckConstraint(
            "order_status IN ('order-pending', 'order-processing', 'order-completed', 'order-refunded', 'order-failed', 'order-cancelled', 'order-at-local-facility', 'order-out-for-delivery', 'order-at-distribution-center', 'order-packed')",
            name='valid_order_status'
        ),
        sa.CheckConstraint(
            "payment_status IN ('payment-pending', 'payment-processing', 'payment-success', 'payment-failed', 'payment-reversal', 'payment-cash-on-delivery', 'payment-cash', 'payment-wallet', 'payment-awaiting-for-approval')",
            name='valid_payment_status'
        )
    )
    
    # Create orders_status table (depends on orders)
    op.create_table('orders_status',
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('order_id', sa.BigInteger(), nullable=False),
        sa.Column('language', sa.String(length=191), nullable=False, server_default='en'),
        sa.Column('order_pending_date', sa.DateTime(), nullable=True),
        sa.Column('order_processing_date', sa.DateTime(), nullable=True),
        sa.Column('order_completed_date', sa.DateTime(), nullable=True),
        sa.Column('order_refunded_date', sa.DateTime(), nullable=True),
        sa.Column('order_failed_date', sa.DateTime(), nullable=True),
        sa.Column('order_cancelled_date', sa.DateTime(), nullable=True),
        sa.Column('order_at_local_facility_date', sa.DateTime(), nullable=True),
        sa.Column('order_out_for_delivery_date', sa.DateTime(), nullable=True),
        sa.Column('order_packed_date', sa.DateTime(), nullable=True),
        sa.Column('order_at_distribution_center_date', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('order_id'),
        sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='orders_status_order_id_fkey')
    )
    
    # Create order_product table - make variation_option_id nullable and remove foreign key if table doesn't exist
    op.create_table('order_product',
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('order_id', sa.BigInteger(), nullable=False),
        sa.Column('product_id', sa.BigInteger(), nullable=False),
        sa.Column('variation_option_id', sa.BigInteger(), nullable=True),
        sa.Column('order_quantity', sa.String(length=191), nullable=False),
        sa.Column('unit_price', sa.Float(), nullable=False),
        sa.Column('subtotal', sa.Float(), nullable=False),
        sa.Column('admin_commission', sa.Numeric(precision=10, scale=2), nullable=False, server_default='0.00'),
        sa.Column('deleted_at', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.ForeignKeyConstraint(['order_id'], ['orders.id'], name='order_product_order_id_fkey', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='order_product_product_id_fkey', ondelete='CASCADE')
        # Removed variation_options foreign key constraint for now
    )
    
    # Create indexes
    op.create_index(op.f('ix_orders_tracking_number'), 'orders', ['tracking_number'], unique=True)
    op.create_index(op.f('ix_orders_customer_id'), 'orders', ['customer_id'])
    op.create_index(op.f('ix_orders_shop_id'), 'orders', ['shop_id'])
    op.create_index(op.f('ix_order_product_order_id'), 'order_product', ['order_id'])
    op.create_index(op.f('ix_order_product_product_id'), 'order_product', ['product_id'])
    op.create_index(op.f('ix_order_product_variation_option_id'), 'order_product', ['variation_option_id'])


def downgrade() -> None:
    """Downgrade schema."""
    # Drop indexes first
    op.drop_index(op.f('ix_order_product_variation_option_id'), table_name='order_product')
    op.drop_index(op.f('ix_order_product_product_id'), table_name='order_product')
    op.drop_index(op.f('ix_order_product_order_id'), table_name='order_product')
    op.drop_index(op.f('ix_orders_shop_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_customer_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_tracking_number'), table_name='orders')
    
    # Drop tables in reverse order
    op.drop_table('order_product')
    op.drop_table('orders_status')
    op.drop_table('orders')
    
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Revert shipping_classes is_global column
    op.execute('ALTER TABLE shipping_classes ALTER COLUMN is_global TYPE VARCHAR(191) USING CASE WHEN is_global THEN \'true\' ELSE \'false\' END')
    
    op.alter_column('products', 'dimension_unit',
               existing_type=sqlmodel.sql.sqltypes.AutoString(length=30),
               type_=sa.VARCHAR(length=10),
               existing_nullable=True)
    op.alter_column('products', 'shipping_info',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'return_policy',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'meta_description',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'warranty',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('email_template', 'html_content',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    # ### end Alembic commands ###